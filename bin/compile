#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
unset GIT_DIR

function print() {
  echo "-----> $1"
}

# Taken from https://devcenter.heroku.com/articles/buildpack-api#bin-compile-summary
function export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}
# Taken from https://devcenter.heroku.com/articles/buildpack-api#style
function indent() {
  sed -u 's/^/       /'
}
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}

export_env_dir "$3"

# Create the cache directory if not exist.
mkdir -p $CACHE_DIR
if [ -n "$FLUTTER_BUILD_DIR" ]; then
  APP_DIR=$BUILD_DIR/$FLUTTER_BUILD_DIR
else
  APP_DIR=$BUILD_DIR
fi
cd "$APP_DIR"

if [ -d "$CACHE_DIR/flutter" ]; then
  print "Restoring Flutter SDK from CACHE"
  cp -R $CACHE_DIR/flutter $APP_DIR
else
  print "Installing SDK from Github repository."
  git clone https://github.com/flutter/flutter.git --quiet
fi

# Check if FLUTTER_VERSION variables is set.
if [ -n "$FLUTTER_VERSION" ]; then
  # Load bash variables from flutter --machine --version and read it like  $FLUTTER_VERSION variable.
  flutter/bin/flutter --machine --version >flutter.json
  FLUTTER_INSTALLED_VERSION=$(grep -o '"frameworkVersion": *"[^"]*' flutter.json | grep -o '[^"]*$')

  # Check if the FLUTTER_VERSION is the same with the installed one.
  if [ "$FLUTTER_VERSION" != "$FLUTTER_INSTALLED_VERSION" ]; then
    print "Installing Flutter SDK version : $FLUTTER_VERSION"
    flutter/bin/flutter version $FLUTTER_VERSION --quiet | indent
  fi
  rm flutter.json

else

  print "Running flutter upgrade command"
  if [ "$channel" != "beta" ]; then
    flutter/bin/flutter channel beta | indent
  fi

  flutter/bin/flutter upgrade --quiet | indent
fi

print "Running flutter clean command."
flutter/bin/flutter clean --quiet | indent

print "Getting packages from Flutter project"
flutter/bin/flutter pub get --quiet | indent

PATH="$PATH":"$(pwd)/flutter/bin/"

PUB_CACHE="$HOME/.pub-cache/"
mkdir -p $PUB_CACHE

# Saving SDK in Cache and in app.
if [ -x flutter/bin/flutter ]; then
  print "Saving Flutter SDK in Cache"
  rm -rf $CACHE_DIR/flutter
  cp -R $APP_DIR/flutter $CACHE_DIR/flutter
  mv $APP_DIR/flutter/bin/cache/dart-sdk/ $APP_DIR
  rm -rf $APP_DIR/flutter
fi

#  To read hidden directories and use move with exclusion.
shopt -s extglob

du -h -d 2 | sort -n

$APP_DIR/dart-sdk/bin/dart pub get

export PATH="$PATH":"/$APP_DIR/dart-sdk/bin/"
export PATH="$PATH":"/$APP_DIR/.pub-cache/bin"


